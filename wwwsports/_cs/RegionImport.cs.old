/*
Objective:
Import other region matches from Asia Sports

Last updated:
4 August 2003 by Chapman

C#.NET complier statement:
csc /t:library /out:..\bin\RegionImport.dll /r:..\bin\DBManager.dll;..\bin\Files.dll RegionImport.cs
*/

using System;
using System.Data.OleDb;
using System.Reflection;
using System.Text;
using System.Web;
using TDL.DB;
using TDL.IO;

[assembly:AssemblyCompany("TDSL")]
[assembly:AssemblyCopyright("(c) 2003 TDSL. All rights reserved.")]
[assembly:AssemblyDescription("其他地區 -> 匯入賽事")]
[assembly:AssemblyProduct("Sports.NET")]
[assembly:AssemblyTitle("Sports.NET DLL")]
[assembly:AssemblyVersion("1.0.*")]
namespace SportsUtil {
	public class RegionImport {
		const string LOGFILESUFFIX = "log";
		int m_RecordCount = 0;
		string m_Region;
		OleDbDataReader m_SportsOleReader;
		DBManager m_SportsDBMgr;
		Files m_SportsLog;
		StringBuilder SQLString;

		public RegionImport(string Connection) {
			m_SportsDBMgr = new DBManager();
			m_SportsDBMgr.ConnectionString = Connection;
			m_SportsLog = new Files();
			SQLString = new StringBuilder();
		}

		public int NumberOfRecords {
			get {
				return m_RecordCount;
			}
		}

		public string Region {
			get {
				return m_Region;
			}
		}

		public string GetAsiaMatches() {
			string sRecordStr;
			string sRegionID;
			StringBuilder HTMLString = new StringBuilder();

			try {
				sRegionID = HttpContext.Current.Request.QueryString["RegionID"];
				SQLString.Remove(0,SQLString.Length);
				SQLString.Append("select CREGION from OTHERREGION_CFG where IREGION_ID=");
				SQLString.Append(sRegionID);
				m_Region = m_SportsDBMgr.ExecuteQueryString(SQLString.ToString());
				m_SportsDBMgr.Close();

				SQLString.Remove(0,SQLString.Length);
				SQLString.Append("select game.MATCHDATE, game.MATCHTIME, game.LEAGUE, game.LEAGLONG, game.HOST, game.GUEST, game.FIELD, game.HOST_HANDI from GAMEINFO game, LEAGINFO leag where game.LEAGLONG = leag.leagname order by leag.LEAG_ORDER, game.MATCHDATE, game.MATCHTIME");
				m_SportsOleReader = m_SportsDBMgr.ExecuteQuery(SQLString.ToString());
				while(m_SportsOleReader.Read()) {
					HTMLString.Append("<tr align=\"center\"><td><input type=\"checkbox\" name=\"importItem\" value=\"");
					HTMLString.Append(m_RecordCount);
					HTMLString.Append("\" checked></td>");

					//Match Date and Time (Hidden Field)
					sRecordStr = m_SportsOleReader.GetString(0);
					HTMLString.Append("<td><input type=\"hidden\" name=\"MatchDate\" value=\"");
					HTMLString.Append(sRecordStr);
					HTMLString.Append("\">");
					sRecordStr = sRecordStr.Insert(4,"/");
					sRecordStr = sRecordStr.Insert(7,"/");
					HTMLString.Append(sRecordStr);
					HTMLString.Append("</td>");
					sRecordStr = m_SportsOleReader.GetString(1);
					HTMLString.Append("<td><input type=\"hidden\" name=\"MatchTime\" value=\"");
					HTMLString.Append(sRecordStr);
					HTMLString.Append("\">");
					sRecordStr = sRecordStr.Insert(2,":");
					HTMLString.Append(sRecordStr);
					HTMLString.Append("</td>");

					//Alias and League
					sRecordStr = m_SportsOleReader.GetString(2).Trim();
					HTMLString.Append("<td><input type=\"hidden\" name=\"Alias\" value=\"");
					HTMLString.Append(sRecordStr);
					HTMLString.Append("\">");
					sRecordStr = m_SportsOleReader.GetString(3).Trim();
					HTMLString.Append(sRecordStr);
					HTMLString.Append("<input type=\"hidden\" name=\"League\" value=\"");
					HTMLString.Append(sRecordStr);
					HTMLString.Append("\"></td>");

					//Host
					sRecordStr = m_SportsOleReader.GetString(4).Trim();
					HTMLString.Append("<td>");
					HTMLString.Append(sRecordStr);
					HTMLString.Append("<input type=\"hidden\" name=\"Host\" value=\"");
					HTMLString.Append(sRecordStr);
					HTMLString.Append("\"></td>");

					//Guest
					sRecordStr = m_SportsOleReader.GetString(5).Trim();
					HTMLString.Append("<td>");
					HTMLString.Append(sRecordStr);
					HTMLString.Append("<input type=\"hidden\" name=\"Guest\" value=\"");
					HTMLString.Append(sRecordStr);
					HTMLString.Append("\">");

					//Match Field (Hidden field)
					sRecordStr = "";
					if(!m_SportsOleReader.IsDBNull(6)) {
						sRecordStr = m_SportsOleReader.GetString(6).Trim();
						if(sRecordStr.Equals("-1")) sRecordStr = "";
					}
					HTMLString.Append("<input type=\"hidden\" name=\"MatchField\" value=\"");
					HTMLString.Append(sRecordStr);
					HTMLString.Append("\">");

					sRecordStr = "";
					if(!m_SportsOleReader.IsDBNull(7)) {
						sRecordStr = m_SportsOleReader.GetString(7).Trim();
						if(sRecordStr.Equals("-1")) sRecordStr = "";
					}
					HTMLString.Append("<input type=\"hidden\" name=\"HostHandicap\" value=\"");
					HTMLString.Append(sRecordStr);
					HTMLString.Append("\"></td></tr>");
					m_RecordCount++;
				}
				m_SportsDBMgr.Close();
				m_SportsOleReader.Close();
				m_SportsDBMgr.Dispose();
				HTMLString.Append("<input type=\"hidden\" name=\"RecordCount\" value=\"");
				HTMLString.Append(m_RecordCount.ToString());
				HTMLString.Append("\"><input type=\"hidden\" name=\"RegionID\" value=\"");
				HTMLString.Append(sRegionID);
				HTMLString.Append("\">");
			} catch(Exception ex) {
				m_SportsLog.FilePath = HttpContext.Current.Application["ErrorFilePath"].ToString();
				m_SportsLog.SetFileName(0,LOGFILESUFFIX);
				m_SportsLog.Open();
				m_SportsLog.Write(DateTime.Now.ToString("HH:mm:ss") + " RegionImport.cs.GetAsiaMatches(): " + ex.ToString());
				m_SportsLog.Close();
				HTMLString.Remove(0,HTMLString.Length);
				HTMLString.Append((string)HttpContext.Current.Application["accessErrorMsg"]);
			}

			return HTMLString.ToString();
		}

		public int Import() {
			int iRecIndex, iSendRequiredLen, iMatchCnt = 0, iExisted = 0, iUpdIndex = 0, iSuccessUpd = 0;
			string sRegion, sRegionID, sMatchDate, sMatchTime, sLeague, sAlias, sHost, sGuest, sMatchField, sHostHandicap;
			char[] delimiter = new char[] {','};
			string[] arrSendRequired, arrMatchDate, arrMatchTime, arrLeague, arrAlias, arrHost, arrGuest;
			string[] arrMatchField, arrHostHandicap;

			sRegionID = HttpContext.Current.Request.Form["RegionID"];
			try {
				SQLString.Remove(0,SQLString.Length);
				SQLString.Append("select CREGION from OTHERREGION_CFG where IREGION_ID=");
				SQLString.Append(sRegionID);
				sRegion = m_SportsDBMgr.ExecuteQueryString(SQLString.ToString());
				try {
					arrSendRequired = HttpContext.Current.Request.Form["importItem"].Split(delimiter);
					iSendRequiredLen = arrSendRequired.Length;
				} catch(Exception) {
					arrSendRequired = new string[0];
					iSendRequiredLen = 0;
				}
				arrMatchDate = HttpContext.Current.Request.Form["MatchDate"].Split(delimiter);
				arrMatchTime = HttpContext.Current.Request.Form["MatchTime"].Split(delimiter);
				arrAlias = HttpContext.Current.Request.Form["Alias"].Split(delimiter);
				arrLeague = HttpContext.Current.Request.Form["League"].Split(delimiter);
				arrHost = HttpContext.Current.Request.Form["Host"].Split(delimiter);
				arrGuest = HttpContext.Current.Request.Form["Guest"].Split(delimiter);
				arrHostHandicap = HttpContext.Current.Request.Form["HostHandicap"].Split(delimiter);
				arrMatchField = HttpContext.Current.Request.Form["MatchField"].Split(delimiter);

				for(iRecIndex=0; iRecIndex<iSendRequiredLen; iRecIndex++) {
					iUpdIndex = Convert.ToInt32(arrSendRequired[iRecIndex]);
					sMatchDate = arrMatchDate[iUpdIndex];
					sMatchTime = arrMatchTime[iUpdIndex];
					sLeague = arrLeague[iUpdIndex];
					sHost = arrHost[iUpdIndex];
					sGuest = arrGuest[iUpdIndex];
					sAlias = arrAlias[iUpdIndex];
					sHostHandicap = arrHostHandicap[iUpdIndex];
					sMatchField = arrMatchField[iUpdIndex];

					SQLString.Remove(0,SQLString.Length);
					SQLString.Append("select count(MATCH_CNT) from OTHERODDSINFO where COMPANY='");
					SQLString.Append(sRegion);
					SQLString.Append("' and LEAGUE='");
					SQLString.Append(sLeague);
					SQLString.Append("' and HOST='");
					SQLString.Append(sHost);
					SQLString.Append("' and GUEST='");
					SQLString.Append(sGuest);
					SQLString.Append("'");
					iExisted = m_SportsDBMgr.ExecuteScalar(SQLString.ToString());
					if(iExisted == 0) {
						SQLString.Remove(0,SQLString.Length);
						SQLString.Append("select max(MATCH_CNT) from OTHERODDSINFO");
						m_SportsOleReader = m_SportsDBMgr.ExecuteQuery(SQLString.ToString());
						if(m_SportsOleReader.Read()) {
							if(!m_SportsOleReader.IsDBNull(0)) {
								iMatchCnt = m_SportsOleReader.GetInt32(0);
							}
						}
						m_SportsDBMgr.Close();
						m_SportsOleReader.Close();
						iMatchCnt++;

						SQLString.Remove(0,SQLString.Length);
						SQLString.Append("INSERT INTO OTHERODDSINFO values ('");
						SQLString.Append(sRegion);
						SQLString.Append("','");
						SQLString.Append(sLeague);
						SQLString.Append("','");
						SQLString.Append(sAlias);
						SQLString.Append("','");
						SQLString.Append(sHost);
						SQLString.Append("','");
						SQLString.Append(sGuest);
						SQLString.Append("','");
						SQLString.Append(iMatchCnt.ToString());
						SQLString.Append("','U','");
						SQLString.Append(sMatchDate);
						SQLString.Append("','");
						SQLString.Append(sMatchTime);
						SQLString.Append("','");
						SQLString.Append(sMatchField);
						SQLString.Append("','");
						SQLString.Append(sHostHandicap);
						SQLString.Append("','','','','','','','','0','0','V','-1','1')");
						m_SportsDBMgr.ExecuteNonQuery(SQLString.ToString());
						iSuccessUpd++;
					}
				}
				m_SportsDBMgr.Dispose();

				//write log
				m_SportsLog.FilePath = HttpContext.Current.Application["EventFilePath"].ToString();
				m_SportsLog.SetFileName(0,LOGFILESUFFIX);
				m_SportsLog.Open();
				m_SportsLog.Write(DateTime.Now.ToString("HH:mm:ss") + " RegionImport.cs: Import " + iSuccessUpd.ToString() + " matches from Asia Sports (" + HttpContext.Current.Session["user_name"] + ")");
				m_SportsLog.Close();
			} catch(Exception ex) {
				iSuccessUpd = -1;
				m_SportsLog.FilePath = HttpContext.Current.Application["ErrorFilePath"].ToString();
				m_SportsLog.SetFileName(0,LOGFILESUFFIX);
				m_SportsLog.Open();
				m_SportsLog.Write(DateTime.Now.ToString("HH:mm:ss") + " RegionImport.cs.Import(): " + ex.ToString());
				m_SportsLog.Close();
			}
			return iSuccessUpd;
		}
	}
}